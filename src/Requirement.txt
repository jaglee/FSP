SHA3, source code
gmp
{compile: MinGW; lib64!}
ntdll.lib: windows kit\8.0\lib\win8\um // #pragma comment(lib, "ntdll.lib") //?


Two U.S. patents have been issued for OCB mode.[5] However, a special exemption has been granted so that OCB mode can be used in software licensed under the GNU General Public License without cost, as well as for any non-commercial, non-governmental application. Since the authors have only applied for patent protection in the U.S., the algorithm is free to use in software not developed and not sold inside the U.S.[6]
As of January 2013, the author has granted a free license for any open source license certified by the Open Source Initiative


Macro definitions for testability
NDEBUG -- Release, driver only
DEBUG - DEBUG mode
TRACE - DEBUG mode, meant to trace execution path
TRACE_PACKET - DEBUG mode, meant to trace send-receive



Open Source Hardware / Open Hardware


//in linux, use high-resolution timers, jiffies 
//				
//#include <linux/kernel.h>
//#include <linux/module.h>
//#include <linux/hrtimer.h>
//#include <linux/ktime.h>
//
//
//#define MS_TO_NS(x)	(x * 1E6L)
//
//static struct hrtimer hr_timer;
//enum hrtimer_restart my_hrtimer_callback( struct hrtimer *timer )
//{
//  printk( "my_hrtimer_callback called (%ld).\n", jiffies );
//  return HRTIMER_NORESTART;
//}
//
//int init_module( void )
//{
//  ktime_t ktime;
//  unsigned long delay_in_ms = 200L;
//  printk("HR Timer module installing\n");
//  ktime = ktime_set( 0, MS_TO_NS(delay_in_ms) );
//  hrtimer_init( &hr_timer, CLOCK_MONOTONIC, HRTIMER_MODE_REL );
//  hr_timer.function = &my_hrtimer_callback;
//  printk( "Starting timer to fire in %ldms (%ld)\n", delay_in_ms, jiffies );
//  hrtimer_start( &hr_timer, ktime, HRTIMER_MODE_REL );
//  return 0;
//}
//
//void cleanup_module( void )
//{
//  int ret;
//  ret = hrtimer_cancel( &hr_timer );
//  if (ret) printk("The timer was still in use...\n");
//  printk("HR Timer module uninstalling\n");
//  return;
//}
